name: Test Civic Auth Example Apps (Playwright)

on:
  workflow_call:
    inputs:
      project-path:
        required: true
        type: string
      playwright-spec:
        required: true
        type: string
      build-command:
        required: false
        type: string
        default: yarn build
      dev-command:
        required: false
        type: string
        default: yarn dev
      browser:
        required: false
        type: string
        default: webkit
      job-name:
        required: false
        type: string
        default: "Test Job"
    secrets:
      CLIENT_ID:
        required: true
      AUTH_SERVER:
        required: true
      NEXT_PUBLIC_WALLET_API_BASE_URL:
        required: true
      VITE_WALLET_API_BASE_URL:
        required: true
      DATABASE_URL:
        required: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
      id-token: write
      pages: write
    env:
      CLIENT_ID: ${{ secrets.CLIENT_ID }}
      VITE_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      AUTH_SERVER: ${{ secrets.AUTH_SERVER }}
      VITE_AUTH_SERVER: ${{ secrets.AUTH_SERVER }}
      NEXT_PUBLIC_WALLET_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_WALLET_API_BASE_URL }}
      VITE_WALLET_API_BASE_URL: ${{ secrets.VITE_WALLET_API_BASE_URL }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
    defaults:
      run:
        working-directory: ${{ inputs.project-path }}
    steps:
      - name: Create unique identifier
        id: project-id
        working-directory: .
        run: |
          # Use timestamp and random number for guaranteed uniqueness
          timestamp=$(date +%s)
          random_id=$((RANDOM % 90000 + 10000))
          unique_id="${timestamp}-${random_id}"
          echo "project-id=$unique_id" >> $GITHUB_OUTPUT
          echo "Project ID: $unique_id"
      - uses: actions/checkout@v4
        with:
          token: ${{ github.token }}

      - name: Install Bun
        if: contains(inputs.project-path, 'hono')
        run: |
          curl -fsSL https://bun.sh/install | bash
          echo "BUN_INSTALL=$HOME/.bun" >> $GITHUB_ENV
          echo "$HOME/.bun/bin" >> $GITHUB_PATH

      - name: Cache Yarn packages
        uses: actions/cache@v4
        with:
          path: |
            ${{ inputs.project-path }}/node_modules
            packages/e2e/node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles(format('{0}/yarn.lock', inputs.project-path)) }}-${{ hashFiles(format('{0}/package.json', inputs.project-path)) }}-${{ hashFiles('packages/e2e/package.json') }}

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
          key: playwright-browsers-${{ runner.os }}-${{ hashFiles('packages/e2e/package.json') }}
          restore-keys: |
            playwright-browsers-${{ runner.os }}-

      - name: Yarn install with latest Civic packages
        run: |
          # Function to get the latest stable version (prefer stable over pre-release)
          get_latest_version() {
            local pkg=$1
            echo "Checking versions for $pkg..." >&2
            
            # First try to get the latest stable version (no pre-release identifiers)
            local stable_version=$(npm view $pkg versions --json 2>/dev/null | \
              grep -o '"[^"]*"' | \
              sed 's/"//g' | \
              grep -v -E '\-(alpha|beta|rc|dev|pre)' | \
              sort -V | \
              tail -n 1)
            
            if [ -n "$stable_version" ] && [ "$stable_version" != "null" ]; then
              echo "Latest stable version found: $stable_version" >&2
              echo "${pkg}@${stable_version}"
              return
            fi
            
            # Fallback to absolute latest if no stable version found
            local latest_version=$(npm view $pkg versions --json 2>/dev/null | \
              grep -o '"[^"]*"' | \
              sed 's/"//g' | \
              sort -V | \
              tail -n 1)
            
            if [ -z "$latest_version" ] || [ "$latest_version" = "null" ]; then
              echo "Could not determine latest version for $pkg, using latest tag" >&2
              echo "${pkg}@latest"
            else
              echo "Latest version found (including pre-release): $latest_version" >&2
              echo "${pkg}@${latest_version}"
            fi
          }
          
          # Check which Civic packages are dependencies and install latest versions
          if grep -q '"@civic/auth"' package.json; then
            auth_pkg=$(get_latest_version "@civic/auth")
            echo "Installing $auth_pkg"
            yarn add "$auth_pkg"
          fi
          
          if grep -q '"@civic/auth-web3"' package.json; then
            web3_pkg=$(get_latest_version "@civic/auth-web3")
            echo "Installing $web3_pkg"
            yarn add "$web3_pkg"
          fi
          
          # Install remaining dependencies
          yarn install

      - name: Install Playwright CLI and Allure
        working-directory: packages/e2e
        run: |
          yarn add -D @playwright/test allure-commandline allure-playwright
          
      - name: Verify Allure Installation
        working-directory: packages/e2e
        run: |
          npx allure --version
          echo "Allure command-line tool is available"

      - name: Install Playwright browsers
        working-directory: packages/e2e
        run: yarn playwright install --with-deps
        # The cache step above will restore browsers if available, so this will be fast on subsequent runs

      - name: Yarn build
        run: ${{ inputs.build-command }}

      - name: Start App
        run: ${{ inputs.dev-command }} &

      - name: Wait for app to start
        run: |
            if echo "${{ inputs.dev-command }}" | grep -q "subpath"; then
              echo "Waiting for app with basepath at http://localhost:3000/demo"
              npx wait-on http-get://localhost:3000/demo --timeout 300000
            elif echo "${{ inputs.dev-command }}" | grep -q "loginSuccessUrl"; then
              echo "Waiting for app with loginSuccessUrl at http://localhost:3000"
              npx wait-on http-get://localhost:3000 --timeout 300000
            else
              echo "Waiting for app at http://localhost:3000"
              npx wait-on http-get://localhost:3000 --timeout 300000
            fi

      - name: Run Playwright Tests
        working-directory: packages/e2e
        env:
          ALLURE_RESULTS_DIR: allure-results
          GITHUB_JOB_NAME: ${{ inputs.job-name }}
        run: yarn playwright test ${{ inputs.playwright-spec }}

      - name: Generate Allure Report
        if: always()
        working-directory: packages/e2e
        run: |
          echo "Checking if allure-results directory exists..."
          ls -la allure-results/ || echo "No allure-results directory found"
          echo "Generating Allure report..."
          yarn allure:generate || echo "Failed to generate Allure report"
          echo "Checking if allure-report directory was created..."
          ls -la allure-report/ || echo "No allure-report directory found"

      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ steps.project-id.outputs.project-id }}-${{ inputs.browser }}-${{ github.run_number }}
          path: packages/e2e/allure-report
          retention-days: 5

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ steps.project-id.outputs.project-id }}-${{ inputs.browser }}-${{ github.run_number }}
          path: packages/e2e/allure-results/
          retention-days: 5

      - name: Upload Test Results (Videos, Screenshots, Traces)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ steps.project-id.outputs.project-id }}-${{ inputs.browser }}-${{ github.run_number }}
          path: packages/e2e/test-results/
          retention-days: 5

      - name: Comment with Allure Reports URL
        if: always()
        run: |
          echo "## ðŸ“Š Allure Test Reports" >> $GITHUB_STEP_SUMMARY
          echo "View detailed test reports with screenshots, videos, and traces at:" >> $GITHUB_STEP_SUMMARY
          echo "**https://civicteam.github.io/civic-auth-examples/${{ github.run_number }}**" >> $GITHUB_STEP_SUMMARY

      - name: Upload Allure Results for Publishing
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ steps.project-id.outputs.project-id }}-${{ inputs.browser }}-${{ github.run_number }}-${{ github.job }}-${{ github.run_attempt }}
          path: packages/e2e/allure-results/
          retention-days: 5 