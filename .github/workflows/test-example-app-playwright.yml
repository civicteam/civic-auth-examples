name: Test Example Apps with Safari Browser (WebKit)

on:
  workflow_call:
    inputs:
      project-path:
        required: true
        type: string
      playwright-spec:
        required: true
        type: string
      build-command:
        required: false
        type: string
        default: yarn build
      browser:
        required: false
        type: string
        default: webkit
    secrets:
      CLIENT_ID:
        required: true
      AUTH_SERVER:
        required: true
      NEXT_PUBLIC_WALLET_API_BASE_URL:
        required: true
      VITE_WALLET_API_BASE_URL:
        required: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
      id-token: write
      pages: write
    env:
      CLIENT_ID: ${{ secrets.CLIENT_ID }}
      VITE_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      AUTH_SERVER: ${{ secrets.AUTH_SERVER }}
      VITE_AUTH_SERVER: ${{ secrets.AUTH_SERVER }}
      NEXT_PUBLIC_WALLET_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_WALLET_API_BASE_URL }}
      VITE_WALLET_API_BASE_URL: ${{ secrets.VITE_WALLET_API_BASE_URL }}
    defaults:
      run:
        working-directory: ${{ inputs.project-path }}
    steps:
      - name: Create unique identifier
        id: project-id
        working-directory: .
        run: |
          # Use random number for guaranteed uniqueness
          random_id=$((RANDOM % 90000 + 10000))
          unique_id="random-${random_id}"
          echo "project-id=$unique_id" >> $GITHUB_OUTPUT
          echo "Project ID: $unique_id"
      - uses: actions/checkout@v4
        with:
          token: ${{ github.token }}

      - name: Install Bun
        if: contains(inputs.project-path, 'hono')
        run: |
          curl -fsSL https://bun.sh/install | bash
          echo "BUN_INSTALL=$HOME/.bun" >> $GITHUB_ENV
          echo "$HOME/.bun/bin" >> $GITHUB_PATH

      - name: Cache Yarn packages
        uses: actions/cache@v4
        with:
          path: |
            ${{ inputs.project-path }}/node_modules
            packages/e2e/node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles(format('{0}/yarn.lock', inputs.project-path)) }}-${{ hashFiles(format('{0}/package.json', inputs.project-path)) }}-${{ hashFiles('packages/e2e/package.json') }}

      - name: Yarn install with latest Civic packages
        run: |
          # Function to get latest version (comparing stable vs beta)
          get_latest_version() {
            local pkg=$1
            local beta_version=$(npm view ${pkg}@beta version 2>/dev/null || echo "0.0.0")
            local stable_version=$(npm view ${pkg} version 2>/dev/null || echo "0.0.0")
            local beta_base=$(echo $beta_version | sed 's/-beta.*//')
            
            # Use beta if its base version is higher than stable
            if [[ $(echo -e "$beta_base\n$stable_version" | sort -V | tail -n 1) == "$beta_base" && "$beta_base" != "$stable_version" ]]; then
              echo "${pkg}@${beta_version}"
            else
              echo "${pkg}@${stable_version}"
            fi
          }
          
          # Check which Civic packages are dependencies and install latest versions
          if grep -q '"@civic/auth"' package.json; then
            auth_pkg=$(get_latest_version "@civic/auth")
            echo "Installing $auth_pkg"
            yarn add "$auth_pkg"
          fi
          
          if grep -q '"@civic/auth-web3"' package.json; then
            web3_pkg=$(get_latest_version "@civic/auth-web3")
            echo "Installing $web3_pkg"
            yarn add "$web3_pkg"
          fi
          
          # Install remaining dependencies
          yarn install

      - name: Install Playwright CLI and Allure
        working-directory: packages/e2e
        run: |
          yarn add -D @playwright/test allure-commandline allure-playwright
          yarn install
          
      - name: Verify Allure Installation
        working-directory: packages/e2e
        run: |
          npx allure --version
          echo "Allure command-line tool is available"

      - name: Install Playwright browsers
        working-directory: packages/e2e
        run: yarn playwright install --with-deps

      - name: Yarn build
        run: yarn build

      - name: Start App
        run: yarn dev &

      - name: Wait for app to start
        run: npx wait-on http-get://localhost:3000 --timeout 300000

      - name: Run Playwright Tests
        working-directory: packages/e2e
        env:
          ALLURE_RESULTS_DIR: allure-results
        run: yarn playwright test ${{ inputs.playwright-spec }} --project=${{ inputs.browser }}

      - name: Generate Allure Report
        if: always()
        working-directory: packages/e2e
        run: |
          echo "Checking if allure-results directory exists..."
          ls -la allure-results/ || echo "No allure-results directory found"
          echo "Generating Allure report..."
          yarn allure:generate || echo "Failed to generate Allure report"
          echo "Checking if allure-report directory was created..."
          ls -la allure-report/ || echo "No allure-report directory found"

      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ steps.project-id.outputs.project-id }}-${{ inputs.browser }}-${{ github.run_number }}
          path: packages/e2e/allure-report/
          retention-days: 30

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ steps.project-id.outputs.project-id }}-${{ inputs.browser }}-${{ github.run_number }}
          path: packages/e2e/allure-results/
          retention-days: 30

      - name: Upload Test Results (Videos, Screenshots, Traces)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ steps.project-id.outputs.project-id }}-${{ inputs.browser }}-${{ github.run_number }}
          path: packages/e2e/test-results/
          retention-days: 30

      - name: Comment with Allure Reports URL
        if: always()
        run: |
          echo "## ðŸ“Š Allure Test Reports" >> $GITHUB_STEP_SUMMARY
          echo "View detailed test reports with screenshots, videos, and traces at:" >> $GITHUB_STEP_SUMMARY
          echo "**https://civicteam.github.io/civic-auth-examples/allure-reports**" >> $GITHUB_STEP_SUMMARY

      # Load test report history
      - name: Load test report history
        if: always()
        continue-on-error: true
        uses: actions/checkout@v2
        with:
          ref: gh-pages-allure
          path: allure_history

      # Build test report
      - name: Build test report
        if: always()
        uses: simple-elf/allure-report-action@v1.7
        with:
          gh_pages: allure_history
          allure_results: packages/e2e/allure-results
          allure_history: allure-report-with-history
          
      # Publish test report
      - name: Publish test report
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages-allure
          publish_dir: packages/e2e/allure-report-with-history 
          destination_dir: allure-reports 