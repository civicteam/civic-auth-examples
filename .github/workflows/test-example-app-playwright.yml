name: Test Civic Auth Example Apps (Playwright)

on:
  workflow_call:
    inputs:
      project-path:
        required: true
        type: string
      playwright-spec:
        required: true
        type: string
      build-command:
        required: false
        type: string
        default: yarn build
      dev-command:
        required: false
        type: string
        default: yarn dev
      browser:
        required: false
        type: string
        default: webkit
      job-name:
        required: false
        type: string
        default: "Test Job"
      workflow-identifier:
        required: false
        type: string
        default: "Test Workflow"
      allure-parent-suite:
        required: false
        type: string
        default: "Civic Auth Applications"
    secrets:
      CLIENT_ID:
        required: true
      AUTH_SERVER:
        required: true
      NEXT_PUBLIC_WALLET_API_BASE_URL:
        required: true
      VITE_WALLET_API_BASE_URL:
        required: true
      DATABASE_URL:
        required: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.56.0-jammy
    permissions:
      contents: write
      actions: read
      id-token: write
      pages: write
    env:
      CLIENT_ID: ${{ secrets.CLIENT_ID }}
      VITE_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      AUTH_SERVER: ${{ secrets.AUTH_SERVER }}
      VITE_AUTH_SERVER: ${{ secrets.AUTH_SERVER }}
      NEXT_PUBLIC_WALLET_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_WALLET_API_BASE_URL }}
      VITE_WALLET_API_BASE_URL: ${{ secrets.VITE_WALLET_API_BASE_URL }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      ALLURE_PARENT_SUITE: ${{ inputs.allure-parent-suite }}
      HOME: /root
    defaults:
      run:
        working-directory: ${{ inputs.project-path }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ github.token }}

      - name: Create unique identifier
        id: project-id
        working-directory: .
        run: |
          # Use timestamp, random number, and run attempt for guaranteed uniqueness
          timestamp=$(date +%s%N)
          random_id=$((RANDOM % 90000 + 10000))
          unique_id="${timestamp}-${random_id}-${{ github.run_attempt }}"
          echo "project-id=$unique_id" >> $GITHUB_OUTPUT
          echo "Project ID: $unique_id"

      - name: Install system dependencies
        working-directory: .
        run: |
          apt-get update
          apt-get install -y default-jre-headless fontconfig unzip
          java -version
          echo "System dependencies installed successfully"

      - name: Install Bun
        if: contains(inputs.project-path, 'hono')
        run: |
          curl -fsSL https://bun.sh/install | bash
          echo "BUN_INSTALL=$HOME/.bun" >> $GITHUB_ENV
          echo "$HOME/.bun/bin" >> $GITHUB_PATH

      - name: Cache Yarn packages
        uses: actions/cache@v4
        with:
          path: |
            ${{ inputs.project-path }}/node_modules
            packages/e2e/node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles(format('{0}/yarn.lock', inputs.project-path)) }}-${{ hashFiles(format('{0}/package.json', inputs.project-path)) }}-${{ hashFiles('packages/e2e/package.json') }}

      # Skipping browser cache since we're using Playwright container with pre-installed browsers

      - name: Yarn install with latest Civic packages
        run: |
          # Function to get latest version (beta or prod) - adapted from check-versions workflow
          get_latest_version() {
            local package=$1
            local beta_version=$(npm view ${package}@beta version 2>/dev/null || echo "")
            local prod_version=$(npm view ${package} version 2>/dev/null || echo "")
            
            echo "Package: $package" >&2
            echo "Beta version: $beta_version" >&2
            echo "Prod version: $prod_version" >&2
            
            if [ -z "$beta_version" ] && [ -z "$prod_version" ]; then
              echo "Could not determine versions for $package, using latest tag" >&2
              echo "latest"
              return
            fi
            
            if [ -z "$beta_version" ]; then
              echo "Using prod version: $prod_version" >&2
              echo "$prod_version"
              return
            fi
            
            if [ -z "$prod_version" ]; then
              echo "Using beta version: $beta_version" >&2
              echo "$beta_version"
              return
            fi
            
            local beta_base=$(echo $beta_version | sed 's/-beta.*//')
            local prod_base=$prod_version
            
            if [[ $(echo -e "$beta_base\n$prod_base" | sort -V | tail -n 1) == "$beta_base" && "$beta_base" != "$prod_base" ]]; then
              echo "Using beta version: $beta_version" >&2
              echo "$beta_version"
            else
              echo "Using prod version: $prod_version" >&2
              echo "$prod_version"
            fi
          }
          
          # Check which Civic packages are dependencies and install latest versions
          if grep -q '"@civic/auth"' package.json; then
            auth_version=$(get_latest_version "@civic/auth")
            echo "Installing @civic/auth@$auth_version"
            yarn add "@civic/auth@$auth_version"
          fi
          
          if grep -q '"@civic/auth-web3"' package.json; then
            auth_web3_version=$(get_latest_version "@civic/auth-web3")
            echo "Installing @civic/auth-web3@$auth_web3_version"
            yarn add "@civic/auth-web3@$auth_web3_version"
          fi
          
          # Install remaining dependencies
          yarn install

      - name: Install Playwright CLI and Allure
        working-directory: packages/e2e
        run: |
          yarn add -D @playwright/test allure-commandline allure-playwright
          
      - name: Verify Allure Installation
        working-directory: packages/e2e
        run: |
          npx allure --version
          echo "Allure command-line tool is available"

      # Skipping browser installation - using Playwright container with pre-installed browsers

      - name: Yarn build
        run: ${{ inputs.build-command }}

      - name: Start App
        run: |
          echo "Starting app with command: ${{ inputs.dev-command }}"
          nohup ${{ inputs.dev-command }} > /tmp/app.log 2>&1 &
          APP_PID=$!
          echo "App started with PID: $APP_PID"
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          sleep 5
          echo "=== First 50 lines of app log ==="
          head -50 /tmp/app.log || echo "No log output yet"
          
      - name: Wait for app to start
        run: |
            if echo "${{ inputs.dev-command }}" | grep -q "subpath"; then
              TARGET_URL="localhost:3000/demo"
            elif echo "${{ inputs.dev-command }}" | grep -q "loginSuccessUrl"; then
              TARGET_URL="localhost:3000"
            else
              TARGET_URL="localhost:3000"
            fi
            
            echo "Waiting for app at http://$TARGET_URL"
            npx wait-on http-get://$TARGET_URL --timeout 300000 --interval 2000 --verbose || {
              echo "=== App failed to start. Full app log: ==="
              cat /tmp/app.log
              echo "=== Checking if process is still running ==="
              ps aux | grep -E "node|yarn|npm" | grep -v grep
              echo "=== Port 3000 status ==="
              netstat -tulpn | grep 3000 || lsof -i :3000 || echo "Port 3000 not in use"
              exit 1
            }

      - name: Run Playwright Tests
        working-directory: packages/e2e
        env:
          ALLURE_RESULTS_DIR: allure-results
          GITHUB_JOB_NAME: ${{ inputs.job-name }}
        run: |
          # Capitalize browser name to match Playwright project names (Chromium, WebKit, Firefox)
          BROWSER_NAME=$(echo "${{ inputs.browser }}" | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}')
          echo "Running tests on browser: $BROWSER_NAME"
          yarn playwright test ${{ inputs.playwright-spec }}

      - name: Generate Allure Report
        if: always()
        working-directory: packages/e2e
        run: |
          echo "Checking if allure-results directory exists..."
          ls -la allure-results/ || echo "No allure-results directory found"
          echo "Generating Allure report..."
          yarn allure:generate || echo "Failed to generate Allure report"
          echo "Checking if allure-report directory was created..."
          ls -la allure-report/ || echo "No allure-report directory found"

      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ steps.project-id.outputs.project-id }}-${{ inputs.browser }}
          path: packages/e2e/allure-report
          retention-days: 5

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ steps.project-id.outputs.project-id }}-${{ inputs.browser }}
          path: packages/e2e/allure-results/
          retention-days: 5

      - name: Upload Test Results (Videos, Screenshots, Traces)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ steps.project-id.outputs.project-id }}-${{ inputs.browser }}
          path: packages/e2e/test-results/
          retention-days: 5

      - name: Comment with Allure Reports URL
        if: always()
        run: |
          echo "## ðŸ“Š Allure Test Reports" >> $GITHUB_STEP_SUMMARY
          echo "View detailed test reports with screenshots, videos, and traces at:" >> $GITHUB_STEP_SUMMARY
          echo "**https://civicteam.github.io/civic-auth-examples/${{ github.run_number }}**" >> $GITHUB_STEP_SUMMARY

      - name: Upload Allure Results for Publishing
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-publish-${{ steps.project-id.outputs.project-id }}-${{ inputs.browser }}
          path: packages/e2e/allure-results/
          retention-days: 5 