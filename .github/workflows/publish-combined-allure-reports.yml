name: Publish Combined Allure Reports

on:
  workflow_dispatch:
    inputs:
      target-sha:
        description: 'Target SHA to collect reports from (defaults to latest main)'
        required: false
        type: string
  push:
    branches:
      - chore/update_web3_tests
      - main

jobs:
  publish-combined-reports:
    name: "Publish Combined Allure Reports"
    runs-on: ubuntu-latest
    if: always()
    permissions:
      contents: write
      actions: read
      id-token: write
      pages: write
    steps:
      - name: Debug trigger information
        run: |
          echo "üöÄ Workflow triggered successfully!"
          echo "Event: ${{ github.event_name }}"
          echo "Triggered by workflow: ${{ github.event.workflow_run.name || 'N/A' }}"
          echo "SHA: ${{ github.event.workflow_run.head_sha || github.sha }}"
          echo "Branch: ${{ github.event.workflow_run.head_branch || github.ref_name }}"
          
      - name: Wait for test workflows to complete
        run: |
          echo "‚è≥ Waiting for test workflows to complete..."
          echo "This workflow will wait up to 15 minutes for test workflows to finish"
          
          # Simple approach: just wait a reasonable amount of time
          # The download steps will handle missing artifacts gracefully
          sleep 720  # Wait 12 minutes for workflows to start and make progress
          
          echo "‚úÖ Wait period completed, proceeding with artifact download"
          
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Web2 Dev Mode Report
        continue-on-error: true
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: web2-e2e-tests-playwright-dev-mode.yml
          name: web2-dev-mode-allure-report
          path: reports/web2-dev-mode/
          if_no_artifact_found: warn

      - name: Download Web2 Start Mode Report
        continue-on-error: true
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: web2-e2e-tests-playwright-start-mode.yml
          name: web2-start-mode-allure-report
          path: reports/web2-start-mode/
          if_no_artifact_found: warn

      - name: Download Web3 Dev Mode Report
        continue-on-error: true
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: web3-e2e-tests-playwright-dev-mode.yml
          name: web3-dev-mode-allure-report
          path: reports/web3-dev-mode/
          if_no_artifact_found: warn

      - name: Download Web3 Start Mode Report
        continue-on-error: true
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: web3-e2e-tests-playwright-start-mode.yml
          name: web3-start-mode-allure-report
          path: reports/web3-start-mode/
          if_no_artifact_found: warn

      - name: List downloaded reports
        run: |
          echo "Downloaded reports structure:"
          find reports -type f -name "index.html" | head -10
          echo "Total report directories found: $(find reports -name index.html | wc -l)"
          ls -la reports/

      - name: Create combined report structure
        run: |
          echo "Creating combined report structure..."
          mkdir -p combined-report
          
          # Create an index.html that provides navigation to all reports
          cat > combined-report/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Civic Auth E2E Test Reports</title>
              <style>
                  body { 
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      margin: 0; padding: 40px; 
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                      color: white;
                  }
                  .container { 
                      max-width: 1200px; 
                      margin: 0 auto; 
                      background: rgba(255,255,255,0.1);
                      backdrop-filter: blur(10px);
                      border-radius: 20px;
                      padding: 40px;
                      box-shadow: 0 8px 32px rgba(0,0,0,0.3);
                  }
                  h1 { 
                      text-align: center; 
                      margin-bottom: 40px; 
                      font-size: 2.5em;
                      text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
                  }
                  .reports-grid { 
                      display: grid; 
                      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); 
                      gap: 30px; 
                  }
                  .report-card { 
                      background: rgba(255,255,255,0.15);
                      border-radius: 15px; 
                      padding: 30px; 
                      text-align: center;
                      transition: all 0.3s ease;
                      border: 1px solid rgba(255,255,255,0.2);
                  }
                  .report-card:hover { 
                      transform: translateY(-10px);
                      background: rgba(255,255,255,0.25);
                      box-shadow: 0 15px 35px rgba(0,0,0,0.3);
                  }
                  .report-card h2 { 
                      margin-bottom: 20px; 
                      font-size: 1.4em;
                  }
                  .report-card a { 
                      display: inline-block;
                      background: rgba(255,255,255,0.9);
                      color: #333;
                      padding: 12px 30px;
                      border-radius: 25px;
                      text-decoration: none;
                      font-weight: 600;
                      transition: all 0.3s ease;
                  }
                  .report-card a:hover { 
                      background: white;
                      transform: scale(1.05);
                  }
                  .emoji { font-size: 2em; margin-bottom: 15px; }
                  .description { 
                      margin: 15px 0; 
                      opacity: 0.9; 
                      font-size: 0.95em;
                      line-height: 1.4;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üß™ Civic Auth E2E Test Reports</h1>
                  <div class="reports-grid">
                      <div class="report-card">
                          <div class="emoji">üöÄ</div>
                          <h2>Web2 Dev Mode</h2>
                          <div class="description">Development mode tests for Web2 applications including NextJS, React, Express, and VanillaJS</div>
                          <a href="web2-dev-mode/index.html">View Latest Report</a>
                          <br><br>
                          <a href="web2-dev-mode/" style="font-size: 0.9em; opacity: 0.8;">üìö View History</a>
                      </div>
                      <div class="report-card">
                          <div class="emoji">üè≠</div>
                          <h2>Web2 Start Mode</h2>
                          <div class="description">Production build tests for Web2 applications with optimized bundles and performance validation</div>
                          <a href="web2-start-mode/index.html">View Latest Report</a>
                          <br><br>
                          <a href="web2-start-mode/" style="font-size: 0.9em; opacity: 0.8;">üìö View History</a>
                      </div>
                      <div class="report-card">
                          <div class="emoji">üåê</div>
                          <h2>Web3 Dev Mode</h2>
                          <div class="description">Development mode tests for Web3 applications including Solana wallet adapters and Wagmi integrations</div>
                          <a href="web3-dev-mode/index.html">View Latest Report</a>
                          <br><br>
                          <a href="web3-dev-mode/" style="font-size: 0.9em; opacity: 0.8;">üìö View History</a>
                      </div>
                      <div class="report-card">
                          <div class="emoji">‚ö°</div>
                          <h2>Web3 Start Mode</h2>
                          <div class="description">Production build tests for Web3 applications with wallet connectivity and blockchain interactions</div>
                          <a href="web3-start-mode/index.html">View Latest Report</a>
                          <br><br>
                          <a href="web3-start-mode/" style="font-size: 0.9em; opacity: 0.8;">üìö View History</a>
                      </div>
                  </div>
              </div>
          </body>
          </html>
          EOF

      - name: Copy individual reports to combined structure
        run: |
          echo "Copying individual reports..."
          
          # Copy each report to the combined structure
          # The artifacts might be in subdirectories, so we need to find the actual report files
          
          copy_main_report() {
            local source_dir="$1"
            local target_dir="$2"
            local report_name="$3"
            
            echo "Processing $report_name from $source_dir to $target_dir"
            
            if [ -d "$source_dir" ]; then
              mkdir -p "$target_dir"
              
              # Find all numbered directories and copy them for history
              local numbered_dirs=($(find "$source_dir" -maxdepth 1 -type d -name "[0-9]*" | sort -V))
              
              if [ ${#numbered_dirs[@]} -gt 0 ]; then
                echo "Found ${#numbered_dirs[@]} numbered directories: ${numbered_dirs[*]}"
                
                # Copy each numbered directory for history
                for numbered_dir in "${numbered_dirs[@]}"; do
                  local report_number=$(basename "$numbered_dir")
                  local history_dir="$target_dir/$report_number"
                  
                  echo "Copying $numbered_dir to $history_dir"
                  mkdir -p "$history_dir"
                  cp -r "$numbered_dir"/* "$history_dir/" 2>/dev/null || true
                done
                
                # Also copy the most recent one to the main directory for "latest"
                local latest_dir="${numbered_dirs[-1]}"
                echo "Copying latest ($latest_dir) to main directory"
                cp -r "$latest_dir"/* "$target_dir/" 2>/dev/null || true
                
                echo "‚úÖ Copied $report_name report with history (${#numbered_dirs[@]} versions)"
                echo "Files in latest: $(ls -la "$target_dir" | wc -l) items"
              else
                echo "‚ö†Ô∏è No numbered directories found in $source_dir"
                # List what's actually in the directory
                echo "Contents of $source_dir:"
                find "$source_dir" -maxdepth 2 -type f | head -10
              fi
            else
              mkdir -p "$target_dir"
              echo "‚ö†Ô∏è $report_name report directory not found: $source_dir"
            fi
          }
          
          copy_main_report "reports/web2-dev-mode" "combined-report/web2-dev-mode" "Web2 Dev Mode"
          copy_main_report "reports/web2-start-mode" "combined-report/web2-start-mode" "Web2 Start Mode"  
          copy_main_report "reports/web3-dev-mode" "combined-report/web3-dev-mode" "Web3 Dev Mode"
          copy_main_report "reports/web3-start-mode" "combined-report/web3-start-mode" "Web3 Start Mode"
          
          echo "Combined report structure:"
          find combined-report -name "index.html" | sort
          echo "Directory structure:"
          find combined-report -type d | sort
          
          # Debug: Check what's in each report directory
          echo "=== DEBUGGING REPORT CONTENTS ==="
          for report_dir in combined-report/*/; do
            if [ -d "$report_dir" ]; then
              echo "Contents of $(basename "$report_dir"):"
              ls -la "$report_dir" | head -10
              echo "---"
            fi
          done

      - name: Fix absolute URLs and redirects in reports
        run: |
          echo "Fixing absolute URLs and redirects in Allure reports..."
          
          # Function to fix URLs in a report directory
          fix_report_urls() {
            local report_dir="$1"
            local report_name="$2"
            
            if [ -d "$report_dir" ] && [ -f "$report_dir/index.html" ]; then
              echo "Fixing URLs in $report_name report..."
              
              # Replace absolute GitHub Pages URLs with relative paths
              find "$report_dir" -name "*.html" -type f -exec sed -i 's|https://civicteam\.github\.io/civic-auth-examples/[0-9]*/|./|g' {} \;
              find "$report_dir" -name "*.js" -type f -exec sed -i 's|https://civicteam\.github\.io/civic-auth-examples/[0-9]*/|./|g' {} \;
              find "$report_dir" -name "*.json" -type f -exec sed -i 's|https://civicteam\.github\.io/civic-auth-examples/[0-9]*/|./|g' {} \;
              
              # Also fix URLs without build numbers
              find "$report_dir" -name "*.html" -type f -exec sed -i 's|https://civicteam\.github\.io/civic-auth-examples/|./|g' {} \;
              find "$report_dir" -name "*.js" -type f -exec sed -i 's|https://civicteam\.github\.io/civic-auth-examples/|./|g' {} \;
              find "$report_dir" -name "*.json" -type f -exec sed -i 's|https://civicteam\.github\.io/civic-auth-examples/|./|g' {} \;
              
              # Remove meta refresh redirects
              find "$report_dir" -name "*.html" -type f -exec sed -i '/<meta.*refresh.*>/d' {} \;
              
              # Remove JavaScript redirects (common patterns)
              find "$report_dir" -name "*.html" -type f -exec sed -i '/window\.location\.href.*civicteam\.github\.io/d' {} \;
              find "$report_dir" -name "*.html" -type f -exec sed -i '/window\.location\.replace.*civicteam\.github\.io/d' {} \;
              find "$report_dir" -name "*.js" -type f -exec sed -i '/window\.location\.href.*civicteam\.github\.io/d' {} \;
              find "$report_dir" -name "*.js" -type f -exec sed -i '/window\.location\.replace.*civicteam\.github\.io/d' {} \;
              
              echo "‚úÖ Fixed URLs and redirects in $report_name"
            else
              echo "‚ö†Ô∏è No report found in $report_dir"
            fi
          }
          
          # Fix URLs in each report
          fix_report_urls "combined-report/web2-dev-mode" "Web2 Dev Mode"
          fix_report_urls "combined-report/web2-start-mode" "Web2 Start Mode"
          fix_report_urls "combined-report/web3-dev-mode" "Web3 Dev Mode"
          fix_report_urls "combined-report/web3-start-mode" "Web3 Start Mode"
          
          # Debug: Check HTML content
          echo "=== DEBUGGING HTML CONTENT ==="
          for report_dir in combined-report/*/; do
            if [ -d "$report_dir" ] && [ -f "$report_dir/index.html" ]; then
              echo "First 20 lines of $(basename "$report_dir")/index.html:"
              head -20 "$report_dir/index.html"
              echo "---"
            fi
          done

      - name: Publish combined reports
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: combined-report
