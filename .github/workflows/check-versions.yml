name: Check Package Versions

on:
  workflow_call:

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check-version.outputs.version_changed }}
      auth_latest: ${{ steps.check-version.outputs.auth_latest }}
      web3_latest: ${{ steps.check-version.outputs.web3_latest }}

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ github.token }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Check Versions
        id: check-version
        run: |
          # Get current versions
          AUTH_BETA_VERSION=$(npm view @civic/auth@beta version)
          AUTH_PROD_VERSION=$(npm view @civic/auth version)
          WEB3_BETA_VERSION=$(npm view @civic/auth-web3@beta version)
          WEB3_PROD_VERSION=$(npm view @civic/auth-web3 version)
          
          # Function to get latest version (beta or prod)
          get_latest_version() {
            local beta=$1
            local prod=$2
            local beta_base=$(echo $beta | sed 's/-beta.*//')
            local prod_base=$prod
            
            if [[ $(echo -e "$beta_base\n$prod_base" | sort -V | tail -n 1) == "$beta_base" && "$beta_base" != "$prod_base" ]]; then
              echo $beta
            else
              echo $prod
            fi
          }
          
          # Get latest versions
          AUTH_LATEST=$(get_latest_version "$AUTH_BETA_VERSION" "$AUTH_PROD_VERSION")
          WEB3_LATEST=$(get_latest_version "$WEB3_BETA_VERSION" "$WEB3_PROD_VERSION")
          
          echo "Auth Latest version: $AUTH_LATEST"
          echo "Web3 Latest version: $WEB3_LATEST"
          
          # Set outputs
          echo "auth_latest=$AUTH_LATEST" >> $GITHUB_OUTPUT
          echo "web3_latest=$WEB3_LATEST" >> $GITHUB_OUTPUT
          
          # Check for version changes
          if [ -f .civic-versions ]; then
            PREV_VERSIONS=$(cat .civic-versions)
            PREV_AUTH_BETA=$(echo "$PREV_VERSIONS" | sed -n '1p')
            PREV_AUTH_PROD=$(echo "$PREV_VERSIONS" | sed -n '2p')
            PREV_WEB3_BETA=$(echo "$PREV_VERSIONS" | sed -n '3p')
            PREV_WEB3_PROD=$(echo "$PREV_VERSIONS" | sed -n '4p')
            
            PREV_AUTH_LATEST=$(get_latest_version "$PREV_AUTH_BETA" "$PREV_AUTH_PROD")
            PREV_WEB3_LATEST=$(get_latest_version "$PREV_WEB3_BETA" "$PREV_WEB3_PROD")
            
            if [ "$AUTH_LATEST" != "$PREV_AUTH_LATEST" ] || [ "$WEB3_LATEST" != "$PREV_WEB3_LATEST" ]; then
              echo "version_changed=true" >> $GITHUB_OUTPUT
              echo "Changed from:"
              echo "Auth: $PREV_AUTH_LATEST -> $AUTH_LATEST"
              echo "Web3: $PREV_WEB3_LATEST -> $WEB3_LATEST"
            else
              echo "No version changes detected"
            fi
          else
            echo "First run - no previous versions file found"
            echo "version_changed=true" >> $GITHUB_OUTPUT
          fi
          
          # Write new versions to file
          echo "$AUTH_BETA_VERSION" > .civic-versions
          echo "$AUTH_PROD_VERSION" >> .civic-versions
          echo "$WEB3_BETA_VERSION" >> .civic-versions
          echo "$WEB3_PROD_VERSION" >> .civic-versions

      - name: Commit and push changes
        if: steps.check-version.outputs.version_changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -m "Update package versions to latest [skip ci]"
          # Instead of rebasing (which can cause conflicts), try to push directly
          # If that fails, fetch and merge instead of rebasing
          git push || (git fetch && git merge --no-edit origin/main && git push) 